<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/hernanisamueldiniz/PycharmProjects/cclearly/arquivo.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>nome</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>Pessoa</name>;</typedef>

<function><type><name>void</name></type> <name>imprimir</name><parameter_list>(<parameter><decl><type><name>Pessoa</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ID: %d, Nome: %s\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nome</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>fatorial</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name>n</name> <operator>*</operator> <call><name>fatorial</name><argument_list>(<argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Pessoa</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Pessoa</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>erro</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <literal type="number">42</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>nome</name></name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="string">"ZÃ© do Ponteiro"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>imprimir</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d! = %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>fatorial</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>opcao</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>opcao</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Escolheu 1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Escolheu 2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Outra opÃ§Ã£o\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>erro</name>:</label>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Erro de alocaÃ§Ã£o!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
